-- Migration: Clean Slack Message Formatting
-- This removes tips, buttons, footer sections and fixes newline HTML issues

CREATE OR REPLACE FUNCTION handle_article_generation_direct_slack()
RETURNS trigger AS $$
DECLARE
    brief_title TEXT;
    product_name TEXT;
    user_profile_data RECORD;
    admin_data RECORD;
    slack_message JSONB;
BEGIN
    -- Only trigger if article_content was actually added/updated and wasn't empty before
    IF NEW.article_content IS NOT NULL 
       AND NEW.article_content != '' 
       AND COALESCE(OLD.article_content, '') = '' THEN
        
        -- Get the user profile information
        SELECT up.id as profile_id, up.email, up.company_name, up.admin_assigned_slack_channel_id
        INTO user_profile_data
        FROM user_profiles up
        WHERE up.id = NEW.user_id;
        
        -- If we can't find the user profile, skip notification
        IF user_profile_data IS NULL THEN
            RAISE NOTICE 'No user profile found for user_id: %', NEW.user_id;
            RETURN NEW;
        END IF;
        
        -- Extract brief title and product name
        brief_title := COALESCE(NEW.title, 'Article Generated');
        product_name := COALESCE(NEW.product_name, user_profile_data.company_name);
        
        RAISE NOTICE 'Sending clean Slack notification for user % (profile %): %', 
            NEW.user_id, user_profile_data.profile_id, brief_title;
        
        -- Get admin Slack token if user has admin-assigned channel
        IF user_profile_data.admin_assigned_slack_channel_id IS NOT NULL THEN
            SELECT slack_access_token
            INTO admin_data
            FROM admin_profiles
            WHERE email = 'lashay@bofu.ai'
            LIMIT 1;
            
            IF admin_data.slack_access_token IS NOT NULL THEN
                -- Build clean Slack message without tips, buttons, or footer
                slack_message := jsonb_build_object(
                    'channel', user_profile_data.admin_assigned_slack_channel_id,
                    'text', 'üöÄ Article Generation Complete: ' || brief_title,
                    'blocks', jsonb_build_array(
                        -- Header
                        jsonb_build_object(
                            'type', 'header',
                            'text', jsonb_build_object(
                                'type', 'plain_text',
                                'text', 'üöÄ Article Generation Complete',
                                'emoji', true
                            )
                        ),
                        -- Main message
                        jsonb_build_object(
                            'type', 'section',
                            'text', jsonb_build_object(
                                'type', 'mrkdwn',
                                'text', 'üéä *Fantastic!* Your article has been successfully generated by our AI and is now ready for your review and editing.'
                            )
                        ),
                        -- Article details (fixed newline issues)
                        jsonb_build_object(
                            'type', 'section',
                            'fields', jsonb_build_array(
                                jsonb_build_object(
                                    'type', 'mrkdwn',
                                    'text', '*üì∞ Article Title:* ' || brief_title
                                ),
                                jsonb_build_object(
                                    'type', 'mrkdwn',
                                    'text', '*üè¢ Company:* ' || COALESCE(user_profile_data.company_name, 'N/A')
                                ),
                                CASE 
                                    WHEN product_name IS NOT NULL AND product_name != user_profile_data.company_name THEN 
                                        jsonb_build_object(
                                            'type', 'mrkdwn',
                                            'text', '*üéØ Product Focus:* ' || product_name
                                        )
                                    ELSE 
                                        jsonb_build_object(
                                            'type', 'mrkdwn',
                                            'text', '*üë§ Author:* ' || user_profile_data.email
                                        )
                                END,
                                jsonb_build_object(
                                    'type', 'mrkdwn',
                                    'text', '*üë§ Author:* ' || user_profile_data.email
                                )
                            )
                        ),
                        -- Status
                        jsonb_build_object(
                            'type', 'section',
                            'text', jsonb_build_object(
                                'type', 'mrkdwn',
                                'text', '*üìä Status:* ‚úÖ Generated | üìù Ready for Editing | üîç Awaiting Review'
                            )
                        )
                    )
                );
                
                -- Send Slack notification
                PERFORM net.http_post(
                    url := 'https://slack.com/api/chat.postMessage',
                    headers := jsonb_build_object(
                        'Authorization', 'Bearer ' || admin_data.slack_access_token,
                        'Content-Type', 'application/json'
                    ),
                    body := slack_message
                );
                
                RAISE NOTICE 'Clean Slack notification sent for article: %', brief_title;
            ELSE
                RAISE NOTICE 'Admin Slack token not found, skipping Slack notification';
            END IF;
        ELSE
            RAISE NOTICE 'No admin-assigned Slack channel, skipping Slack notification';
        END IF;
        
        -- Still create in-app notification
        INSERT INTO user_notifications (
            user_id,
            brief_id,
            notification_type,
            title,
            message,
            is_read,
            created_at
        ) VALUES (
            user_profile_data.profile_id,
            NEW.id,
            'article_generated',
            'Article Generated: ' || brief_title,
            'Your article "' || brief_title || '"' || 
            CASE 
                WHEN product_name IS NOT NULL THEN ' for ' || product_name 
                ELSE '' 
            END || ' has been generated and is ready for review.',
            false,
            NOW()
        );
        
        RAISE NOTICE 'Article generation notification completed for user %', user_profile_data.profile_id;
    END IF;
    
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        -- Log error but don't fail the article update
        RAISE NOTICE 'Error in article generation notification trigger: %', SQLERRM;
        RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Grant necessary permissions
GRANT EXECUTE ON FUNCTION handle_article_generation_direct_slack() TO service_role;

COMMENT ON FUNCTION handle_article_generation_direct_slack() IS 'Clean version: Sends simple, professional Slack notifications when articles are generated';