-- Migration: Article Generation Notification Trigger
-- This trigger automatically sends notifications when articles are generated by Moonlit
-- Fires when article_content is updated in content_briefs table

-- Create function to handle article generation notifications
CREATE OR REPLACE FUNCTION handle_article_generation()
RETURNS trigger AS $$
DECLARE
    brief_title TEXT;
    product_name TEXT;
    user_profile_data RECORD;
BEGIN
    -- Only trigger if article_content was actually added/updated and wasn't empty before
    IF NEW.article_content IS NOT NULL 
       AND NEW.article_content != '' 
       AND COALESCE(OLD.article_content, '') = '' THEN
        
        -- Get the user profile information
        SELECT up.id as profile_id, up.email, up.company_name
        INTO user_profile_data
        FROM user_profiles up
        WHERE up.user_id = NEW.user_id;
        
        -- If we can't find the user profile, skip notification
        IF user_profile_data IS NULL THEN
            RAISE NOTICE 'No user profile found for user_id: %', NEW.user_id;
            RETURN NEW;
        END IF;
        
        -- Extract brief title and product name
        brief_title := COALESCE(NEW.title, 'Article Generated');
        product_name := COALESCE(NEW.product_name, user_profile_data.company_name);
        
        -- Log the notification attempt
        RAISE NOTICE 'Triggering article generation notification for user % (profile %): %', 
            NEW.user_id, user_profile_data.profile_id, brief_title;
        
        -- Call the Edge Function to send notifications (Slack + Email + In-app)
        PERFORM
            net.http_post(
                url := current_setting('app.supabase_url') || '/functions/v1/send-user-notification',
                headers := jsonb_build_object(
                    'Content-Type', 'application/json',
                    'Authorization', 'Bearer ' || current_setting('app.service_role_key')
                ),
                body := jsonb_build_object(
                    'userId', user_profile_data.profile_id,
                    'briefId', NEW.id,
                    'briefTitle', brief_title,
                    'productName', product_name,
                    'notificationType', 'article_generated'
                )
            );
        
        -- Also create a fallback in-app notification directly in the database
        INSERT INTO user_notifications (
            user_id,
            brief_id,
            notification_type,
            title,
            message,
            is_read,
            created_at
        ) VALUES (
            user_profile_data.profile_id,
            NEW.id,
            'article_generated',
            'Article Generated: ' || brief_title,
            'Your article "' || brief_title || '"' || 
            CASE 
                WHEN product_name IS NOT NULL THEN ' for ' || product_name 
                ELSE '' 
            END || ' has been generated and is ready for review.',
            false,
            NOW()
        );
        
        -- Create admin notification for brief approval system
        -- Get all admins who should be notified about this article generation
        INSERT INTO brief_approval_notifications (
            admin_id,
            brief_id,
            notification_type,
            message,
            user_email,
            user_company,
            brief_title,
            is_read,
            created_at
        )
        SELECT 
            ap.id,
            NEW.id,
            'article_generated',
            'Article generated by ' || user_profile_data.email || ' from ' || COALESCE(user_profile_data.company_name, 'Unknown Company') || ': "' || brief_title || '"',
            user_profile_data.email,
            user_profile_data.company_name,
            brief_title,
            false,
            NOW()
        FROM admin_profiles ap
        WHERE ap.id IN (
            -- Super admins get all notifications
            SELECT id FROM admin_profiles WHERE role = 'super_admin'
            UNION
            -- Sub-admins only get notifications for their assigned clients
            SELECT aca.admin_id 
            FROM admin_client_assignments aca 
            WHERE aca.client_user_id = user_profile_data.profile_id
        );
        
        RAISE NOTICE 'Article generation notification completed for user %', user_profile_data.profile_id;
        
    END IF;
    
    RETURN NEW;
EXCEPTION
    WHEN OTHERS THEN
        -- Log error but don't fail the article update
        RAISE NOTICE 'Error in article generation notification trigger: %', SQLERRM;
        RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Create the trigger
DROP TRIGGER IF EXISTS article_generation_notification_trigger ON content_briefs;

CREATE TRIGGER article_generation_notification_trigger
    AFTER UPDATE ON content_briefs
    FOR EACH ROW
    EXECUTE FUNCTION handle_article_generation();

-- Grant necessary permissions
GRANT EXECUTE ON FUNCTION handle_article_generation() TO service_role;

-- Ensure http extension is enabled (should already be enabled from previous migration)
CREATE EXTENSION IF NOT EXISTS http;

COMMENT ON FUNCTION handle_article_generation() IS 'Automatically sends notifications when articles are generated by Moonlit';
COMMENT ON TRIGGER article_generation_notification_trigger ON content_briefs IS 'Triggers user and admin notifications when article_content is populated';